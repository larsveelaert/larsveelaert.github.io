Howto: Build your own Network Accessible Storage (NAS) on a low budget

Sharing files through big clunky hard drives is not really a fun thing for anybody. Drives can get damaged, misplaced or somebody loses the power plug (if yours had one).

By trading in a bit of speed and a couple dollars towards electricity, you can have the convenience of having a hard disk that is accessible in your local network, while it being stored in a closet or [Fill in your favourite hiding place].

There are devices available, called NAS-systems, who will do a better job, but keep in mind the following;
- You will be strained by the firmware provided by the manufacturer
- You will have to buy new internal drives for most systems
- The expansibility is limited by the amount of drive slots you have
- No sick credzz from your family and friends

Another option can be to plug your hard drive in your router or modem, which often have the usb port shared as a samba (Windows) share. I myself don't like the idea of having personal data hooked on a device that is connected with the external internet.

So still with us? I'll lead the way... For this build we used a Raspberry Pi 3, which is more than capable of running this server at a speed of 10MB/s. This starts to rival average writing speed of a USB drive.
Another system like a spare desktop PC or another type of machine already hooked up as a server will do.

1. Requirements
Linux system (This guide uses a Raspberry Pi)
Storage (USB hard drives you already have or internal storage in a desktop PC)
2. Preparation of the system
I have a certain love for Arch Linux, but any distro will do, the rest of the guide will contain commands that you can just copy&paste in the terminal, research the commands if they don't work. To install Arch Linux on a RPi follow  these instructions.

Before booting (or rebooting) your system plug your hard drives you want to use and make sure it's connected to the internet, for the Raspberry pi, plug-in an ethernet cable, as it will give the best performance.

3. Install the necessary packages
You will need the vsftpd package. It will pull the other dependencies with it.

pacman -Syu vsftpd
It's always a good idea to reboot the system after installing new packages.

4. Configure the FTP-server
Open the configuration file as root

sudo nano /etc/vsftpd.conf
#### TOT HIER GERAAKT
- mounten van media op /srv/ftp
mount --bind /tmp/harddisk/music /tmp/harddisk/ftp_pvt/user/music



- Uncomment the following options (displayed in the image)

And add these extra ones at the end of the file.



## leg uit wat the settings doen

Di zijn de settings, leg uit dat de rights, gemanaged zijn door folders the chmodden

sudo systemctl start vsftpd
sudo systemctl enable vsftpd

5. Manage access rights per user
users
sudo useradd -m lars
sudo passwd lars
-> put password

mkdir USER
sudo chmod 770 FOLDER for only user acces and sudo chown USER FOLDER for
and shared chmod 777 FOLDER

test...
ftp://house_1

6. Make it secure
TODO ftp beveiliging sssl???? -> this is for the safety,.... not yet done

Generate an SSL Cert, e.g. like that:
# cd /etc/ssl/certs
# openssl req -x509 -nodes -days 7300 -newkey rsa:2048 -keyout /etc/ssl/certs/vsftpd.pem -out /etc/ssl/certs/vsftpd.pem
# chmod 600 /etc/ssl/certs/vsftpd.pem
You will be asked a lot of Questions about your Company etc., as your Certificate is not a trusted one it doesn't really matter what you fill in. You will use this for encryption! If you plan to use this in a matter of trust get one from a CA like thawte, verisign etc.
edit your configuration /etc/vsftpd.conf
#this is important
ssl_enable=YES

#choose what you like, if you accept anon-connections
# you may want to enable this
# allow_anon_ssl=NO

#choose what you like,
# it's a matter of performance i guess
# force_local_data_ssl=NO

#choose what you like
force_local_logins_ssl=YES

#you should at least enable this if you enable ssl...
ssl_tlsv1=YES
#choose what you like
ssl_sslv2=YES
#choose what you like
ssl_sslv3=YES
#give the correct path to your currently generated *.pem file
rsa_cert_file=/etc/ssl/certs/vsftpd.pem
#the *.pem file contains both the key and cert
rsa_private_key_file=/etc/ssl/certs/vsftpd.pem
### space freee??????, SMB a better option??? but speed and cpu overhead

### statuc ip and or /etc/hostname . uitleggen
